{"version":3,"file":"static/js/60.df5ec0e0.chunk.js","mappings":"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","sources":["components/ThreeContext.tsx","components/controller/SquareFly.tsx","components/controller/usePolygon.ts","uses/three/useUpdateVerticies.ts","uses/three/useCamera.ts","uses/three/useLight.ts","uses/three/useRender.ts","uses/useAddObject.ts","uses/useRequestAnimationFrame.ts","utils/math.ts"],"sourcesContent":["import React, { createContext, FC, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\n\r\ninterface ThreeContextProps {\r\n    renderer: THREE.WebGLRenderer | null,\r\n    scene: THREE.Scene | null,\r\n}\r\n\r\nconst initialContext: ThreeContextProps = {\r\n    renderer: null,\r\n    scene: null,\r\n};\r\n\r\nconst ThreeContext = createContext<ThreeContextProps>(initialContext);\r\n\r\nexport const useThreeContext = () => useContext(ThreeContext);\r\nexport const ThreeProvider: FC = ({ children }) => {\r\n    const size = useSize();\r\n    const elCanvas = useRef<HTMLCanvasElement>(null)\r\n    const [threeRenderer, setThreeRenderer] = useState<THREE.WebGLRenderer | null>(null);\r\n\r\n    const scene = useMemo(() => {\r\n        return new THREE.Scene();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (threeRenderer == null) return;\r\n        if (size == null) return;\r\n        threeRenderer.setPixelRatio(window.devicePixelRatio);\r\n        threeRenderer.setSize(size.width, size.height);\r\n    }, [threeRenderer, size])\r\n\r\n    useEffect(() => {\r\n        if (elCanvas.current == null) throw new Error('');\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: elCanvas.current,\r\n            antialias: true,\r\n        });\r\n        setThreeRenderer(renderer);\r\n        return () => {\r\n            setThreeRenderer(null);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <ThreeContext.Provider\r\n            value={{\r\n                renderer: threeRenderer,\r\n                scene,\r\n            }}\r\n        >\r\n            <canvas ref={elCanvas} />\r\n            {children}\r\n        </ThreeContext.Provider>\r\n    );\r\n};\r\n\r\nfunction useSize() {\r\n    const [size, setSize] = useState<{width: number, height: number}>();\r\n\r\n    const resize = useCallback(() => {\r\n        setSize({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        resize();\r\n        window.addEventListener('resize', resize);\r\n        return () => {\r\n            window.removeEventListener('resize', resize);\r\n        };\r\n    }, [resize]);\r\n\r\n    return size;\r\n};","import React, { FC, useEffect, useMemo } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useCamera } from '../../uses/three/useCamera';\r\nimport { useDirectionalLight } from '../../uses/three/useLight';\r\nimport { usePolygon } from './usePolygon';\r\nimport { useRender } from '../../uses/three/useRender';\r\nimport { useAddObject } from '../../uses/useAddObject';\r\nimport { useRequestAnimationFrame } from '../../uses/useRequestAnimationFrame';\r\nimport { useThreeContext } from '../ThreeContext';\r\nimport { useUpdateVerticies } from '../../uses/three/useUpdateVerticies';\r\n\r\n// ref https://www.wpc-store.com/f/feature/detail/?p=2223\r\nexport const SquareFly: FC = () => {\r\n    const { scene } = useThreeContext();\r\n    const camera = useCamera({ z: -400 })\r\n    const render = useRender(camera);\r\n\r\n    useEffect(() => {\r\n        if (scene == null) return;\r\n        const light = new THREE.AmbientLight(0x222200, 1.0);\r\n        scene.add(light);\r\n        return () => {\r\n            scene.remove(light);\r\n        };\r\n    }, [scene]);\r\n\r\n    const light1 = useDirectionalLight({ x: -200, y: -100, z: 100, intensity: 1, color: 0x006666 })\r\n    useAddObject(scene, light1);\r\n\r\n    const light2 = useDirectionalLight({ x: 150, y: 100, z: -50, intensity: 1, color: 0xFFFFBB })\r\n    useAddObject(scene, light2);\r\n\r\n    const mesh = usePolygon({\r\n        size: 200,\r\n        // size: 100,\r\n        opacity: 0.2,\r\n        depthWrite: false,\r\n    });\r\n    useAddObject(scene, mesh);\r\n\r\n    const look = useMemo(() => {\r\n        const lookatPosition = new THREE.Vector3(0, 0, 0);\r\n        return lookatPosition;\r\n    }, []);\r\n\r\n    const updatePosition = useUpdateVerticies(mesh.geometry);\r\n    useRequestAnimationFrame((time, deltaTime) => {\r\n        camera.lookAt(look);\r\n        mesh.rotateX(deltaTime / 8600);\r\n        mesh.rotateY(deltaTime / 8700);\r\n        mesh.rotateZ(deltaTime / 8800);\r\n\r\n        light1.position.y = Math.sin(time / 1000) * 400.0;\r\n        light1.position.z = Math.cos(time / 1000) * 400.0;\r\n\r\n        light2.position.x = Math.sin(time / 2200) * 400.0;\r\n        light2.position.z = Math.cos(time / 2000) * 400.0;\r\n\r\n        updatePosition({\r\n            x: (value, index) => value + Math.sin(time / 3500 - (index / 90.0)) * 200.0,\r\n            y: (value, index) => value + Math.sin(time / 3500 - (index / 40.0)) * 250.0,\r\n            z: (value, index) => value + Math.sin(time / 3500 - (index / 70.0)) * 300.0,\r\n        });\r\n        render();\r\n    });\r\n    // return null;\r\n    return (\r\n        <>\r\n            {/* 青いスクリーン */}\r\n            <div style={{ \r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                backgroundColor: \"#faa\",\r\n                opacity: 0.5,\r\n                mixBlendMode: 'overlay',\r\n                width: '100vw',\r\n                height: '100vh',\r\n            }} />\r\n            <div style={{\r\n                boxSizing: 'content-box',\r\n                position: 'fixed',\r\n                top: '50%',\r\n                left: '50%',\r\n                transform: 'translate(-50%, -50%)',\r\n                width: '100vw',\r\n                height: '100vh',\r\n                mixBlendMode: 'multiply',\r\n                backgroundColor: '#fff',\r\n                boxShadow: 'inset 20px 20px 30vw #000',\r\n            }}/>\r\n            <div style={{ \r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                background: 'linear-gradient(#00606b, #999, #fff, #000)',\r\n                mixBlendMode: 'soft-light',\r\n                width: '100vw',\r\n                height: '100vh',\r\n            }} />\r\n\r\n            {/* オレンジアウト */}\r\n            <div style={{ \r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                background: 'linear-gradient(rgba(0,0,0,0) 50%, #ffae00 300%)',\r\n                mixBlendMode: 'overlay',\r\n                width: '100vw',\r\n                height: '100vh',\r\n            }}/>\r\n        </>\r\n    );\r\n};\r\n","import { useMemo } from \"react\";\r\nimport * as THREE from 'three';\r\n\r\nexport const usePolygon = ({\r\n    size = 100,\r\n    detail = 20,\r\n    opacity = 0.5,\r\n    depthWrite = true,\r\n}: {\r\n    size?: number,\r\n    detail?: number,\r\n    opacity?: number,\r\n    depthWrite?: boolean;\r\n} = {}) => {\r\n    const geometry = useMemo(() => new THREE.DodecahedronGeometry(size, detail), [size, detail]);\r\n\r\n    const material = useMemo(() => new THREE.MeshStandardMaterial({\r\n        roughness: 0.46,\r\n        metalness: 0.106,\r\n        transparent: true,\r\n        depthTest: true,\r\n        depthWrite,\r\n        opacity,\r\n        blending: THREE.AdditiveBlending,\r\n    }), [opacity, depthWrite]);\r\n\r\n    const mesh = useMemo(() => {\r\n        return new THREE.Mesh(geometry, material);\r\n    }, [geometry, material]);\r\n\r\n    return mesh;\r\n};\r\n","import { useCallback, useMemo } from 'react';\r\nimport * as THREE from 'three';\r\nimport { editSplitArrayMap } from '../../utils/math';\r\n\r\ninterface Editable {\r\n    x: (value: number, index: number, array: number[]) => number;\r\n    y: (value: number, index: number, array: number[]) => number;\r\n    z: (value: number, index: number, array: number[]) => number;\r\n}\r\n\r\nexport const useUpdateVerticies = (geometry: THREE.BufferGeometry) => {\r\n    const positions = useMemo(() => {\r\n        const positions = geometry.getAttribute('position');\r\n        const points: number[] = [];\r\n        for (let i = 0; i < positions.array.length; i += 1) points.push(positions.array[i]);\r\n        return points;\r\n    }, [geometry]);\r\n\r\n    return useCallback((cb: Editable) => {\r\n        const p = positions.map(editSplitArrayMap(\r\n            cb.x,\r\n            cb.y,\r\n            cb.z,\r\n        ));\r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(p, 3));\r\n    }, [positions, geometry]);\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\nimport * as THREE from 'three';\r\n\r\nexport const useCamera = ({x = 0, y = 0, z = 0}: {x?: number, y?: number, z?: number}) => {\r\n    const refCamera = useRef(new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight));\r\n\r\n    useEffect(() => {\r\n        refCamera.current.position.x = x;\r\n    }, [x]);\r\n\r\n    useEffect(() => {\r\n        refCamera.current.position.y = y;\r\n    }, [y]);\r\n    useEffect(() => {\r\n        refCamera.current.position.z = z;\r\n    }, [z]);\r\n\r\n    return refCamera.current;\r\n}","import { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nexport const useDirectionalLight = ({\r\n    x = 0,\r\n    y = 0,\r\n    z = 0,\r\n    color = 0xFFFFFF,\r\n    intensity = 1,\r\n}: {\r\n    x?: number,\r\n    y?: number,\r\n    z?: number,\r\n    color?: number,\r\n    intensity?: number,\r\n}) => {\r\n    const refLight = useRef(new THREE.DirectionalLight());\r\n    useEffect(() => {\r\n        refLight.current.intensity = intensity;\r\n    }, [intensity]);\r\n    useEffect(() => {\r\n        refLight.current.color.set(color);\r\n    }, [color]);\r\n    useEffect(() => {\r\n        refLight.current.position.x = x;\r\n    }, [x]);\r\n    useEffect(() => {\r\n        refLight.current.position.y = y;\r\n    }, [y]);\r\n    useEffect(() => {\r\n        refLight.current.position.z = z;\r\n    }, [z]);\r\n\r\n    return refLight.current;\r\n}\r\n// const light =  new THREE.DirectionalLight(0xFFFFBB, 1);\r\n// const light =  new THREE.DirectionalLight(0x006666, 1);","import { useThreeContext } from \"../../components/ThreeContext\";\r\nimport * as THREE from 'three';\r\nimport { useCallback } from \"react\";\r\n\r\nexport const useRender = (camera: THREE.Camera) => {\r\n    const { scene, renderer } = useThreeContext();\r\n\r\n    return useCallback(() => {\r\n        if (renderer == null || scene == null) return;\r\n        renderer.render(scene, camera);\r\n    }, [camera, renderer, scene]);\r\n};\r\n","import { useEffect } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nexport const useAddObject = (parent: THREE.Object3D | null, children: THREE.Object3D | null) => {\r\n    useEffect(() => {\r\n        if (parent == null || children == null) return;\r\n        parent.add(children);\r\n        return () => {\r\n            parent.remove(children);\r\n        }\r\n    }, [parent, children]);\r\n};","import { useEffect, useRef } from \"react\";\r\n\r\ntype AnimationFrame = (time: number, deltaTime: number) => void;\r\n\r\nexport function loopAnimation(cb: AnimationFrame) {\r\n    let isCancel = false;\r\n    let id = 0;\r\n    const main: AnimationFrame = (time) => {\r\n        if (isCancel) return;\r\n        id = window.requestAnimationFrame((time) => {\r\n            main(time, 0);\r\n        });\r\n        cb(time, 0);\r\n    }\r\n\r\n    id = window.requestAnimationFrame((time) => {\r\n        main(time, 0)\r\n    });\r\n    return () => {\r\n        isCancel = true;\r\n        window.cancelAnimationFrame(id)\r\n    };\r\n}\r\n\r\nexport function useRequestAnimationFrame(cb: AnimationFrame) {\r\n    const refCallback = useRef<AnimationFrame>(cb);\r\n    const refDeltaTime = useRef(0);\r\n\r\n    useEffect(() => {\r\n        refCallback.current = cb;\r\n    }, [cb]);\r\n    useEffect(() => {\r\n        let animationFrameId = 0;\r\n        const main = (time: number) => {\r\n            animationFrameId = window.requestAnimationFrame(main);\r\n            refCallback.current(time, time - refDeltaTime.current);\r\n            refDeltaTime.current = time;\r\n        }\r\n        animationFrameId = requestAnimationFrame((time) => {\r\n            refDeltaTime.current = time;\r\n            main(time);\r\n        });\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, []);\r\n}\r\n","import Simplex from 'simplex-noise';\r\n\r\ninterface NoiseOptions {\r\n    noiseDiff?: number;\r\n}\r\n\r\nexport const parseSimplecNoise = (instance: Simplex) => (args: number[]): number => {\r\n    if (args.length === 1) throw new Error('fuck you');\r\n    if (args.length === 2) return instance.noise2D(args[0], args[1]);\r\n    if (args.length === 3) return instance.noise3D(args[0], args[1], args[2]);\r\n    return instance.noise4D(args[0], args[1], args[2], args[3]);\r\n}\r\n\r\nexport const createCurlNoise = (noise: (vlaues: number[]) => number) => {\r\n    return (values: number[], options?: NoiseOptions) => {\r\n        const {\r\n            noiseDiff = 0.01,\r\n        } = options || {};\r\n\r\n        return values.map((_, index) => {\r\n            // 誤差A\r\n            const a = values.map((value, target) => {\r\n                if (target === index) {\r\n                    return [\r\n                        value - noiseDiff,\r\n                        value + noiseDiff,\r\n                    ];\r\n                }\r\n                return [\r\n                    value,\r\n                    value,\r\n                ];\r\n            });\r\n\r\n            const result = a.reduce((prev, current, index) => {\r\n                if (index === 0) return noise(current);\r\n                return prev - noise([...current].reverse())\r\n            }, 0);\r\n            return calcEps(result, noiseDiff);\r\n        }).map((val, index) => {\r\n            if (index % 2 === 0) return -val;\r\n            return val;\r\n        });\r\n    };\r\n}\r\n\r\nfunction calcEps(a: number, inv: number) {\r\n    return a * (1.0 / (2 * inv));\r\n}\r\n\r\n/**\r\n * @param t1 - 開始地点\r\n * @param t2 - 終了地点\r\n * @param a - 経過 (0-1)\r\n * @returns t1とt2のa線形補完\r\n */\r\nexport const mix = (t1: number, t2: number, a: number) => t1 * (1 - a) + t2 * a;\r\n\r\nexport const randomXorShift = (seed: number = 88675123) => {\r\n    let w = seed;\r\n    let x = 123456789;\r\n    let y = 362436069;\r\n    let z = 521288629;\r\n    return (min = 0, max = 1) => {\r\n        const t = x ^ (x << 11);\r\n        x = y;\r\n        y = z;\r\n        z = w;\r\n        w = (w ^ (w >>> 19)) ^ (t ^ (t >>> 8));\r\n\r\n        const r = Math.abs(w)\r\n        return min + (r % (max + 1 - min));\r\n    };\r\n};\r\n\r\n/**\r\n * 0-1に変換する\r\n * @param t 対象数値\r\n * @param min 最小数値\r\n * @param max 最大数値\r\n * @returns 0-1\r\n * @example\r\n * ```\r\n * normalize(2, 1, 3) // => 0.5\r\n * ```\r\n */\r\nexport const normalize = (t: number, min: number, max: number): number => (t - min) / (max - min);\r\n\r\n\r\n/**\r\n * @param x 導出元数値\r\n * @param min 最小値\r\n * @param max 最大値\r\n * @returns 最小値と最大値の間を返却する\r\n * @example (1.1, 0, 1) => 1\r\n * @example (-0.1, 0, 1) => 0\r\n * @example (1.1, 1, 0) => 1\r\n * @example (-0.1, 1, 0) => 0\r\n */\r\nexport const minMax = (x: number, range1: number, range2: number): number =>\r\n  Math.min(Math.max(range2, range1), Math.max(Math.min(range2, range1), x));\r\n\r\n/**\r\n * between\r\n * @param min 最小値\r\n * @param max 最大値\r\n * @param a ターゲットの値\r\n * @param offset 外部許可\r\n * @returns\r\n */\r\nexport const between = (min: number, max: number, a: number, offset: number = 0): boolean => a >= min - offset && a <= max + offset;\r\n\r\n// callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any\r\n\r\ntype MapFunction<T, U> = (value: T, index: number, array: T[]) => U;\r\n/**\r\n * map関数をIndexによる分割をし、順次実行する。（例　x y z ごとのポジションを変更する）\r\n */\r\nexport const editSplitArrayMap = <T, U>(...functions: MapFunction<T, U>[]) => (value: T, index: number, array: T[]) => {\r\n    return functions[index % functions.length](value, Math.floor(index / functions.length), array);\r\n};\r\n\r\n"],"names":["initialContext","renderer","scene","ThreeContext","createContext","useThreeContext","useContext","ThreeProvider","children","size","useState","setSize","resize","useCallback","width","window","innerWidth","height","innerHeight","useEffect","addEventListener","removeEventListener","useSize","elCanvas","useRef","threeRenderer","setThreeRenderer","useMemo","THREE","setPixelRatio","devicePixelRatio","current","Error","canvas","antialias","Provider","value","ref","SquareFly","camera","useCamera","z","render","useRender","light","add","remove","light1","useDirectionalLight","x","y","intensity","color","useAddObject","light2","mesh","detail","opacity","depthWrite","geometry","material","roughness","metalness","transparent","depthTest","blending","usePolygon","look","updatePosition","positions","getAttribute","points","i","array","length","push","cb","p","map","editSplitArrayMap","setAttribute","useUpdateVerticies","useRequestAnimationFrame","time","deltaTime","lookAt","rotateX","rotateY","rotateZ","position","Math","sin","cos","index","style","top","left","backgroundColor","mixBlendMode","boxSizing","transform","boxShadow","background","refCamera","refLight","set","parent","loopAnimation","isCancel","id","main","requestAnimationFrame","cancelAnimationFrame","refCallback","refDeltaTime","animationFrameId","parseSimplecNoise","instance","args","noise2D","noise3D","noise4D","createCurlNoise","noise","values","options","noiseDiff","_","a","inv","calcEps","target","reduce","prev","reverse","val","mix","t1","t2","randomXorShift","seed","w","min","max","t","r","abs","minMax","range1","range2","functions","floor"],"sourceRoot":""}