{"version":3,"file":"static/js/992.0861000a.chunk.js","mappings":"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","sources":["components/ThreeContext.tsx","components/controller/Buble2.tsx","uses/three/useCamera.ts","uses/three/useLight.ts","uses/three/useRender.ts","uses/three/useShader.ts","uses/useAddObject.ts","uses/useRequestAnimationFrame.ts"],"sourcesContent":["import React, { createContext, FC, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\n\r\ninterface ThreeContextProps {\r\n    renderer: THREE.WebGLRenderer | null,\r\n    scene: THREE.Scene | null,\r\n}\r\n\r\nconst initialContext: ThreeContextProps = {\r\n    renderer: null,\r\n    scene: null,\r\n};\r\n\r\nconst ThreeContext = createContext<ThreeContextProps>(initialContext);\r\n\r\nexport const useThreeContext = () => useContext(ThreeContext);\r\nexport const ThreeProvider: FC = ({ children }) => {\r\n    const size = useSize();\r\n    const elCanvas = useRef<HTMLCanvasElement>(null)\r\n    const [threeRenderer, setThreeRenderer] = useState<THREE.WebGLRenderer | null>(null);\r\n\r\n    const scene = useMemo(() => {\r\n        return new THREE.Scene();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (threeRenderer == null) return;\r\n        if (size == null) return;\r\n        threeRenderer.setPixelRatio(window.devicePixelRatio);\r\n        threeRenderer.setSize(size.width, size.height);\r\n    }, [threeRenderer, size])\r\n\r\n    useEffect(() => {\r\n        if (elCanvas.current == null) throw new Error('');\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: elCanvas.current,\r\n            antialias: true,\r\n        });\r\n        setThreeRenderer(renderer);\r\n        return () => {\r\n            setThreeRenderer(null);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <ThreeContext.Provider\r\n            value={{\r\n                renderer: threeRenderer,\r\n                scene,\r\n            }}\r\n        >\r\n            <canvas ref={elCanvas} />\r\n            {children}\r\n        </ThreeContext.Provider>\r\n    );\r\n};\r\n\r\nfunction useSize() {\r\n    const [size, setSize] = useState<{width: number, height: number}>();\r\n\r\n    const resize = useCallback(() => {\r\n        setSize({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        resize();\r\n        window.addEventListener('resize', resize);\r\n        return () => {\r\n            window.removeEventListener('resize', resize);\r\n        };\r\n    }, [resize]);\r\n\r\n    return size;\r\n};","import React, { FC, useEffect, useMemo } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useCamera } from '../../uses/three/useCamera';\r\nimport { useDirectionalLight } from '../../uses/three/useLight';\r\nimport { useRender } from '../../uses/three/useRender';\r\nimport { useAddObject } from '../../uses/useAddObject';\r\nimport { useRequestAnimationFrame } from '../../uses/useRequestAnimationFrame';\r\nimport { useThreeContext } from '../ThreeContext';\r\nimport { useShader } from '../../uses/three/useShader';\r\n\r\n// ref https://www.wpc-store.com/f/feature/detail/?p=2223\r\nconst vertexShader = `uniform float u_time;\r\nuniform vec2 u_resolution;\r\nvarying vec2 vUv;\r\n\r\nvoid main()\t{\r\n    vec3 p = position;\r\n    vUv = uv - .5;\r\n    vUv += .5;\r\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(p, 1.0);\r\n}\r\n`;\r\n\r\nconst fragmentShader = `\r\nuniform float u_time;\r\nvarying vec2 vUv;\r\nuniform vec2 u_resolution;\r\n#include <fog_pars_fragment>\r\n\r\nconst float PI = 3.141592653;\r\nconst float DEG = PI / 180.0;\r\n\r\nbool between(float target, float min, float max) {\r\n    return target >= min && target <= max;\r\n}\r\n\r\nfloat norm(float t, float min, float max) {\r\n    return (t - min) / (max - min);\r\n}\r\n\r\nfloat createCircle(vec2 p) {\r\n    float c = 0.0;\r\n\r\n    float len_p = length(p);\r\n\r\n    if (between(len_p, 0.0, 0.8)) {\r\n        float t = mix(0.0, 1.0, pow(norm(len_p, 0.0, 0.8), 8.0));\r\n        c = t;\r\n    }\r\n    if (between(len_p, 0.8, 1.0)) {\r\n        float t = mix(1.0, 0.0, pow(norm(len_p, 0.8, 1.0), 0.2));\r\n        c = t;\r\n    }\r\n    return c;\r\n}\r\n\r\nfloat createSquare(vec2 position, float width, float height) {\r\n    if (position.x > width || position.x < -width) {\r\n        return 0.0;\r\n    }\r\n    if (position.y > height || position.y < -height) {\r\n        return 0.0;\r\n    }\r\n\r\n    return 1.0;\r\n}\r\n\r\nfloat zeroichi(float num) {\r\n    return (num + 1.0) * 2.0;\r\n}\r\n\r\nmat2 rotate2d(float _angle){\r\n    return mat2(\r\n        cos(_angle),-sin(_angle),\r\n        sin(_angle),cos(_angle));\r\n}\r\n\r\nvoid main()\t{\r\n    vec3 color;\r\n    color = vec3(0.0);\r\n    vec2 p = (vUv - vec2(0.5)) * 2.0;\r\n    float t = sin(u_time / 1000.0) * 1.0 + 300.0;\r\n\r\n    for (float i = 0.1; i < 4.0; i += 0.1) {\r\n        float red_line = createSquare(\r\n            (p * rotate2d(45.0 * DEG * sin(t * i))) - vec2(-1., -2.0 + i),\r\n            3.0,\r\n            0.05\r\n        );\r\n        color.r += red_line * 0.5;\r\n\r\n        float blue_line = createSquare(\r\n            (p * rotate2d(45.0 * DEG * sin(t * i))) - vec2(-1., -2.0 + i + 0.1),\r\n            3.0,\r\n            0.05\r\n        );\r\n        color.b += (blue_line * 0.5);\r\n        // color.b = 1.0;\r\n\r\n        float green_line = createSquare(\r\n            (p * rotate2d(45.0 * DEG * sin(t * i))) - vec2(-1., -2.0 + i - 0.1),\r\n            3.0,\r\n            0.05\r\n        );\r\n        color.g += green_line * 0.5;\r\n    }\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n    #include <fog_fragment>\r\n}\r\n`;\r\n\r\nexport const Buble2: FC = () => {\r\n    const { scene } = useThreeContext();\r\n    const camera = useCamera({ z: -400 })\r\n    const render = useRender(camera);\r\n\r\n    useEffect(() => {\r\n        if (scene == null) return;\r\n        const light = new THREE.AmbientLight(0x222200, 1.0);\r\n        scene.add(light);\r\n\r\n        return () => {\r\n            scene.remove(light);\r\n        };\r\n    }, [scene]);\r\n\r\n    const light1 = useDirectionalLight({ x: -200, y: -100, z: 100, intensity: 1, color: 0x006666 })\r\n    useAddObject(scene, light1);\r\n\r\n    const light2 = useDirectionalLight({ x: 150, y: 100, z: -50, intensity: 1, color: 0xFFFFBB })\r\n    useAddObject(scene, light2);\r\n\r\n    const [mesh, registerUniform] = useShader({ fragmentShader, vertexShader });\r\n    useEffect(() => {\r\n        mesh.position.z = -150;\r\n        mesh.position.y = 50;\r\n        mesh.position.x = 50;\r\n    }, [mesh]);\r\n    useAddObject(scene, mesh);\r\n\r\n    const [mesh2, registerUniform2] = useShader({ fragmentShader, vertexShader });\r\n    useEffect(() => {\r\n        mesh2.position.z = -150;\r\n        mesh2.position.y = -50;\r\n        mesh2.position.x = 50;\r\n        mesh2.scale.y = -1;\r\n    }, [mesh2]);\r\n    useAddObject(scene, mesh2);\r\n\r\n    const [mesh3, registerUniform3] = useShader({ fragmentShader, vertexShader });\r\n    useEffect(() => {\r\n        mesh3.position.z = -150;\r\n        mesh3.position.y = 50;\r\n        mesh3.position.x = -50;\r\n        mesh3.scale.x = -1;\r\n    }, [mesh3]);\r\n    useAddObject(scene, mesh3);\r\n\r\n    const [mesh4, registerUniform4] = useShader({ fragmentShader, vertexShader });\r\n    useEffect(() => {\r\n        mesh4.position.z = -150;\r\n        mesh4.position.y = -50;\r\n        mesh4.position.x = -50;\r\n        mesh4.scale.x = -1;\r\n        mesh4.scale.y = -1;\r\n    }, [mesh4]);\r\n    useAddObject(scene, mesh4);\r\n\r\n    const updateUniformTime = registerUniform('u_time', 0);\r\n    registerUniform('u_resolution', [window.innerWidth, window.innerHeight]);\r\n\r\n    const updateUniformTime2 = registerUniform2('u_time', 0);\r\n    registerUniform2('u_resolution', [window.innerWidth, window.innerHeight]);\r\n\r\n    const updateUniformTime3 = registerUniform2('u_time', 0);\r\n    registerUniform3('u_resolution', [window.innerWidth, window.innerHeight]);\r\n\r\n    const updateUniformTime4 = registerUniform2('u_time', 0);\r\n    registerUniform4('u_resolution', [window.innerWidth, window.innerHeight]);\r\n\r\n    const look = useMemo(() => {\r\n        const lookatPosition = new THREE.Vector3(0, 0, 0);\r\n        return lookatPosition;\r\n    }, []);\r\n\r\n    useRequestAnimationFrame((time, deltaTime) => {\r\n        camera.lookAt(look);\r\n        updateUniformTime(time);\r\n        updateUniformTime2(time);\r\n        updateUniformTime3(time);\r\n        updateUniformTime4(time);\r\n        render();\r\n    });\r\n\r\n    return <></>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\nimport * as THREE from 'three';\r\n\r\nexport const useCamera = ({x = 0, y = 0, z = 0}: {x?: number, y?: number, z?: number}) => {\r\n    const refCamera = useRef(new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight));\r\n\r\n    useEffect(() => {\r\n        refCamera.current.position.x = x;\r\n    }, [x]);\r\n\r\n    useEffect(() => {\r\n        refCamera.current.position.y = y;\r\n    }, [y]);\r\n    useEffect(() => {\r\n        refCamera.current.position.z = z;\r\n    }, [z]);\r\n\r\n    return refCamera.current;\r\n}","import { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nexport const useDirectionalLight = ({\r\n    x = 0,\r\n    y = 0,\r\n    z = 0,\r\n    color = 0xFFFFFF,\r\n    intensity = 1,\r\n}: {\r\n    x?: number,\r\n    y?: number,\r\n    z?: number,\r\n    color?: number,\r\n    intensity?: number,\r\n}) => {\r\n    const refLight = useRef(new THREE.DirectionalLight());\r\n    useEffect(() => {\r\n        refLight.current.intensity = intensity;\r\n    }, [intensity]);\r\n    useEffect(() => {\r\n        refLight.current.color.set(color);\r\n    }, [color]);\r\n    useEffect(() => {\r\n        refLight.current.position.x = x;\r\n    }, [x]);\r\n    useEffect(() => {\r\n        refLight.current.position.y = y;\r\n    }, [y]);\r\n    useEffect(() => {\r\n        refLight.current.position.z = z;\r\n    }, [z]);\r\n\r\n    return refLight.current;\r\n}\r\n// const light =  new THREE.DirectionalLight(0xFFFFBB, 1);\r\n// const light =  new THREE.DirectionalLight(0x006666, 1);","import { useThreeContext } from \"../../components/ThreeContext\";\r\nimport * as THREE from 'three';\r\nimport { useCallback } from \"react\";\r\n\r\nexport const useRender = (camera: THREE.Camera) => {\r\n    const { scene, renderer } = useThreeContext();\r\n\r\n    return useCallback(() => {\r\n        if (renderer == null || scene == null) return;\r\n        renderer.render(scene, camera);\r\n    }, [camera, renderer, scene]);\r\n};\r\n","import { useCallback, useEffect, useMemo } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nexport const useShader = ({\r\n    fragmentShader = '',\r\n    vertexShader = '',\r\n    fog = false,\r\n    geometry = new THREE.PlaneBufferGeometry(100, 100, 10, 10),\r\n}: {\r\n    fragmentShader: string,\r\n    vertexShader: string,\r\n    uniforms?: { [uniform: string]: THREE.IUniform },\r\n    fog?: boolean;\r\n    geometry?: THREE.BufferGeometry,\r\n}): [THREE.Mesh<THREE.BufferGeometry, THREE.ShaderMaterial>, (key: string, initialValue: number | number[]) => (value: number | number[]) => void] => {\r\n    const material = useMemo(() => new THREE.ShaderMaterial({\r\n        transparent: true,\r\n        depthTest: true,\r\n        // depthWrite: true,\r\n    }), []);\r\n    useEffect(() => { material.vertexShader = vertexShader }, [material, vertexShader]);\r\n    useEffect(() => { material.fragmentShader = fragmentShader }, [material, fragmentShader]);\r\n    useEffect(() => { material.fog = fog }, [material, fog]);\r\n\r\n    const mesh = useMemo(() => {\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        return mesh\r\n    }, [material, geometry]);\r\n\r\n    const registerUniform = useCallback((key: string, initialValue: number | number[]) => {\r\n        material.uniforms[key] = { value: initialValue };\r\n        const updateUniform = (value: number | number[]) => { material.uniforms[key].value = value; };\r\n        return updateUniform;\r\n    }, [material]);\r\n\r\n    return [\r\n        mesh,\r\n        registerUniform,\r\n    ];\r\n}","import { useEffect } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nexport const useAddObject = (parent: THREE.Object3D | null, children: THREE.Object3D | null) => {\r\n    useEffect(() => {\r\n        if (parent == null || children == null) return;\r\n        parent.add(children);\r\n        return () => {\r\n            parent.remove(children);\r\n        }\r\n    }, [parent, children]);\r\n};","import { useEffect, useRef } from \"react\";\r\n\r\ntype AnimationFrame = (time: number, deltaTime: number) => void;\r\n\r\nexport function loopAnimation(cb: AnimationFrame) {\r\n    let isCancel = false;\r\n    let id = 0;\r\n    const main: AnimationFrame = (time) => {\r\n        if (isCancel) return;\r\n        id = window.requestAnimationFrame((time) => {\r\n            main(time, 0);\r\n        });\r\n        cb(time, 0);\r\n    }\r\n\r\n    id = window.requestAnimationFrame((time) => {\r\n        main(time, 0)\r\n    });\r\n    return () => {\r\n        isCancel = true;\r\n        window.cancelAnimationFrame(id)\r\n    };\r\n}\r\n\r\nexport function useRequestAnimationFrame(cb: AnimationFrame) {\r\n    const refCallback = useRef<AnimationFrame>(cb);\r\n    const refDeltaTime = useRef(0);\r\n\r\n    useEffect(() => {\r\n        refCallback.current = cb;\r\n    }, [cb]);\r\n    useEffect(() => {\r\n        let animationFrameId = 0;\r\n        const main = (time: number) => {\r\n            animationFrameId = window.requestAnimationFrame(main);\r\n            refCallback.current(time, time - refDeltaTime.current);\r\n            refDeltaTime.current = time;\r\n        }\r\n        animationFrameId = requestAnimationFrame((time) => {\r\n            refDeltaTime.current = time;\r\n            main(time);\r\n        });\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, []);\r\n}\r\n"],"names":["initialContext","renderer","scene","ThreeContext","createContext","useThreeContext","useContext","ThreeProvider","children","size","useState","setSize","resize","useCallback","width","window","innerWidth","height","innerHeight","useEffect","addEventListener","removeEventListener","useSize","elCanvas","useRef","threeRenderer","setThreeRenderer","useMemo","THREE","setPixelRatio","devicePixelRatio","current","Error","canvas","antialias","Provider","value","ref","vertexShader","fragmentShader","Buble2","camera","useCamera","z","render","useRender","light","add","remove","light1","useDirectionalLight","x","y","intensity","color","useAddObject","light2","useShader","mesh","registerUniform","position","mesh2","registerUniform2","scale","mesh3","registerUniform3","mesh4","registerUniform4","updateUniformTime","updateUniformTime2","updateUniformTime3","updateUniformTime4","look","useRequestAnimationFrame","time","deltaTime","lookAt","refCamera","refLight","set","fog","geometry","material","transparent","depthTest","key","initialValue","uniforms","parent","loopAnimation","cb","isCancel","id","main","requestAnimationFrame","cancelAnimationFrame","refCallback","refDeltaTime","animationFrameId"],"sourceRoot":""}